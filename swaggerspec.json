{
  "swagger": "2.0",
  "info": {
    "description": "A secure, REST API for real-time data analytics within Project Peach.",
    "version": "1.0.0",
    "title": "Radiology Dashboard API",
    "contact": {
      "name": "API Team",
      "url": "http://wordnik.com",
      "email": "apiteam@wordnik.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "api.peachdashboardcom:443",
  "basePath": "/api",
  "tags": [
    {
      "name": "Dashboard",
      "description": "Creating and modifying default and custom dashboards"
    },
    {
      "name": "Exam",
      "description": "Operations about exams"
    },
    {
      "name": "Request",
      "description": "Operations about requests"
    },
    {
      "name": "Report",
      "description": "Operations about reports"
    },
    {
      "name": "Error",
      "description": "Error handling"
    },
    {
      "name": "Role",
      "description": "Assigning roles to users and specifying permissions belonging to the roles"
    },
    {
      "name": "Data",
      "description": "Accessing data sources"
    },
    {
      "name": "Volume",
      "description": "Retrieving metrics and data related to the volume of activity"
    },
    {
      "name": "Department",
      "description": "Operations related to retrieving departmental information"
    },
    {
      "name": "Cancellation",
      "description": "Data and metrics related to cancellations (patient and doctor)"
    },
    {
      "name": "Activity",
      "description": "Data and metrics related to departmental activity"
    },
    {
      "name": "Attendance",
      "description": "Data and metrics related to attendances (appointments)"
    },
    {
      "name": "User",
      "description": "Operations about users"
    },
    {
      "name": "Permission",
      "description": "Operations about permissions"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/activity/median/examtoreport{dateRange}": {
      "get": {
        "tags": [
          "Activity"
        ],
        "consumes": [],
        "produces": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/activity/median/referraltoexam": {
      "get": {
        "tags": [
          "Activity"
        ],
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "dateRange",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/activity/percentage/examtoreport{dateRange}": {
      "get": {
        "tags": [
          "Activity"
        ],
        "consumes": [],
        "produces": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/activity/percentage/referraltoexam{dateRange}": {
      "get": {
        "tags": [
          "Activity"
        ],
        "consumes": [],
        "produces": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/attendance": {
      "get": {
        "tags": [
          "Attendance"
        ],
        "consumes": [],
        "produces": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/cancellation/cancel{departmentId}{dateRange}": {
      "get": {
        "tags": [
          "Cancellation"
        ],
        "summary": "Cancellation Retrieval",
        "description": "Retrieves a list of cancelled attendances (appointments) when cancellation is independent from the patient (different to DNA, which is patient not attending)",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of cancellations successfully retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Cancellation"
              }
            }
          }
        }
      }
    },
    "/cancellation/dna/{departmentId}{dateRange}": {
      "get": {
        "tags": [
          "Cancellation"
        ],
        "summary": "DNA retrieval",
        "description": "Retrieves a list of DNA cases for a given time period",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "departmentId",
            "in": "path",
            "description": "Unique identifier associated with a department",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "dateRange",
            "in": "path",
            "description": "Timestamp date range in ISO8601 format, with a start and end, such as 2007-03-01T13:00:00Z/2008-05-11T15:30:00Z",
            "required": true,
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of DNA cases successfully retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DNA"
              }
            }
          }
        }
      }
    },
    "/dashboard/default": {
      "post": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Default Dashboard Creation",
        "description": "Creates a new default dashboard for a given role",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roleId",
            "in": "query",
            "description": "Unique identifier for a role",
            "required": true,
            "type": "integer",
            "format": "int32",
            "x-example": 6
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Dashboard Create"
            }
          }
        ],
        "responses": {
          "205": {
            "description": "The default dashboard is successfully created, please refresh content"
          },
          "403": {
            "description": "User is not authorised to create a new default dashboard",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/{dashboardId}": {
      "put": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Dashboard Update",
        "description": "Updates an existing dashboard.",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "dashboardId",
            "in": "path",
            "description": "Refers to the id of the dashboard that is to be updated or deleted.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Dashboard Update"
            }
          }
        ],
        "responses": {
          "205": {
            "description": "Dashboard is successfully updated, please refresh content."
          }
        }
      },
      "delete": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Dashboard Deletion",
        "description": "Deletes an existing dashboard.",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "dashboardId",
            "in": "path",
            "description": "Refers to the id of the dashboard that is to be updated or deleted.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "205": {
            "description": "Dashboard is successfully deleted (not enabled), please refresh content."
          }
        }
      }
    },
    "/dashboards": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Dashboard Retrieval",
        "description": "The Dashboard Retrieval endpoint returns information about the user's existing dashboards. The response includes the configuration which specifies all display-related information.",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An array of dashboards",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Dashboard"
              }
            }
          },
          "404": {
            "description": "The given user does not have dashboard data associated with the id",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Dashboard Creation",
        "description": "The Dashboard Creation endpoint is used when creating a new dashboard.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Dashboard Create"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Dashboard successfully created, refresh the content.",
            "schema": {
              "$ref": "#/definitions/Dashboard"
            }
          },
          "400": {
            "description": "Error 400",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/data/productivity/examScanner": {
      "get": {
        "tags": [
          "Data"
        ],
        "summary": "Exams / Scanner",
        "description": "Retrieves the list of exams completed by a given scanner or scanners over a given period of time",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "scannerId",
            "in": "query",
            "description": "Unique identifier associated with a scanner, if not given, all scanners will be added",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-example": 234
          },
          {
            "name": "dateRange",
            "in": "query",
            "description": "ISO 8607 string with a start and end, if not given, all historic data will be added",
            "required": false,
            "type": "string",
            "x-example": "2007-03-01T13:00:00Z/2008-05-11T15:30:00Z"
          }
        ],
        "responses": {
          "200": {
            "description": "All exams successfully retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExamsCompleted"
              }
            }
          }
        }
      }
    },
    "/data/role": {
      "get": {
        "tags": [
          "Data"
        ],
        "summary": "Datasource Retrieval for Role",
        "description": "Retrieves a list of all data sources for a given role",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roleId",
            "in": "query",
            "description": "Unique identifier for a role",
            "required": true,
            "type": "integer",
            "format": "int32",
            "x-example": 123
          }
        ],
        "responses": {
          "200": {
            "description": "Data sources successfully retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Datasource"
              }
            }
          }
        }
      }
    },
    "/departments": {
      "get": {
        "tags": [
          "Department"
        ],
        "summary": "Department Retrieval",
        "description": "Retrieves a list of all departments",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of departments successfully retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Department"
              }
            }
          }
        }
      }
    },
    "/exams/scanners": {
      "get": {
        "tags": [
          "Exam"
        ],
        "summary": "Scanner Retrieval",
        "description": "Retrieves a list of all scanners",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Scanners successfully retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Scanner"
              }
            }
          }
        }
      }
    },
    "/permissions": {
      "get": {
        "tags": [
          "Permission"
        ],
        "summary": "Permissions retrieval",
        "description": "Retrieves a list of permissions",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "searchTerm",
            "in": "query",
            "description": "Specifies a search term when retrieving permissions",
            "required": false,
            "type": "string",
            "x-example": "view"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/permissions/assign": {
      "put": {
        "tags": [
          "Permission"
        ],
        "summary": "Permission Assignment and Modification",
        "description": "Assigns new permissions to roles or modifies existing ones.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RolePermission"
            }
          }
        ],
        "responses": {
          "205": {
            "description": "The update was successful, please refresh content."
          },
          "405": {
            "description": "The user is not authorised to make this request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/report": {
      "get": {
        "tags": [
          "Report"
        ],
        "consumes": [],
        "produces": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/request": {
      "get": {
        "tags": [
          "Request"
        ],
        "consumes": [],
        "produces": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/roles": {
      "get": {
        "tags": [
          "Role"
        ],
        "summary": "Roles Retrieval",
        "description": "Retrieves the list of all roles",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "searchTerm",
            "in": "query",
            "description": "Search parameter that the admin can specify when retrieving all roles",
            "required": false,
            "type": "string",
            "x-example": "manager"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Integer value limiting the number of roles returned",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-example": 20
          }
        ],
        "responses": {
          "200": {
            "description": "List of roles successfully retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Role"
              }
            }
          },
          "400": {
            "description": "Query parameters must match - searchTerm: String, limit: Integer - both optional",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The user is not authorised to access this information",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/roles/assign": {
      "put": {
        "tags": [
          "Role"
        ],
        "summary": "Role Update",
        "description": "The request is sent when a role is changed for a particular user.",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roleId",
            "in": "query",
            "description": "Unique identifier for a role which is to be updated",
            "required": true,
            "type": "integer",
            "format": "int32",
            "x-example": 10
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Unique identifier for a particular user",
            "required": true,
            "type": "integer",
            "format": "int32",
            "x-example": 1234
          }
        ],
        "responses": {
          "205": {
            "description": "The update was successful, content should be refreshed"
          },
          "403": {
            "description": "The user is not authorised to make this request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Users (List) Retrieval",
        "description": "Retrieve a list of all users",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "departmentId",
            "in": "query",
            "description": "Unique identifier for a department",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-example": 234
          },
          {
            "name": "roleId",
            "in": "query",
            "description": "Unique identifier for a role",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-example": 3
          }
        ],
        "responses": {
          "200": {
            "description": "The list of all users was successfully retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "403": {
            "description": "The user is not authorised to access this information",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "User (1) Retrieval",
        "description": "Retrieves a particular user's data",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "User information successfully retrieved",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "403": {
            "description": "The user is not authorised to access this information",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/volume/exam/complete": {
      "get": {
        "tags": [
          "Volume"
        ],
        "summary": "Exams Completed",
        "description": "Retrieves a list of all exams completed",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Completed exams successfully retrieved",
            "schema": {
              "$ref": "#/definitions/ExamsCompleted"
            }
          }
        }
      }
    },
    "/volume/exam/requested": {
      "get": {
        "tags": [
          "Volume"
        ],
        "summary": "Exams Requested",
        "description": "Retrieves a list of all exams that have been requested but not completed",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of requested exams successfully retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExamsRequested"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Cancellation": {
      "type": "object",
      "required": [
        "attendanceId",
        "patientId",
        "userId"
      ],
      "properties": {
        "attendanceId": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier associated with the attendance for which the cancellation was made"
        },
        "location": {
          "type": "string",
          "description": "Location associated with the attendance"
        },
        "patientId": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier of the patient"
        },
        "userId": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier of the practitioner associated with the cancellation"
        }
      },
      "description": "Cancellation case, different to DNA, where patient does not attent"
    },
    "DNA": {
      "type": "object",
      "required": [
        "attendanceId",
        "patientId",
        "userId"
      ],
      "properties": {
        "attendanceId": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier associated with an attendance (appointment)"
        },
        "location": {
          "type": "string",
          "description": "The location of the attendance"
        },
        "patientId": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier associated with a patient"
        },
        "userId": {
          "type": "integer",
          "format": "int32",
          "description": "unique identifier associated with the practitioner due to carry out the exam"
        }
      },
      "description": "Do Not Attend case - patient-side cancellation"
    },
    "Dashboard": {
      "type": "object",
      "required": [
        "configuration",
        "isEnabled",
        "title",
        "widgets"
      ],
      "properties": {
        "configuration": {
          "type": "string",
          "description": "JSON string representing the client-side display related logic."
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier representing a specific dashboard for a given user. (not required when creating a new dashboard)"
        },
        "isEnabled": {
          "type": "boolean",
          "description": "Specifies whether the dashboard is visible on the user's page. This enables the user to hide dashboards without deleting them.",
          "default": false
        },
        "title": {
          "type": "string",
          "description": "The title of a dashboard."
        },
        "widgets": {
          "type": "array",
          "description": "Represents the array of widgets belonging to the dashboard",
          "items": {
            "$ref": "#/definitions/Widget"
          }
        }
      },
      "description": "Dashboard object"
    },
    "Dashboard Create": {
      "type": "object",
      "required": [
        "configuration",
        "isEnabled",
        "title",
        "widgets"
      ],
      "properties": {
        "configuration": {
          "type": "string",
          "description": "Client-side, display related logic stored as a JSON string."
        },
        "isEnabled": {
          "type": "boolean",
          "description": "Specifies whether the dashboard is shown on the page or not.",
          "default": false
        },
        "title": {
          "type": "string",
          "description": "The title of the dashboard."
        },
        "widgets": {
          "type": "array",
          "description": "The array of widgets associated with the dashboard",
          "items": {
            "$ref": "#/definitions/Widget"
          }
        }
      },
      "description": "Dashboard object used when creating dashboards, if the Dashboard object is missing an id, it is identified as a new dashboard"
    },
    "Dashboard Update": {
      "type": "object",
      "properties": {
        "configuration": {
          "type": "string",
          "description": "JSON string representing the client-side display related logic. Not required if it remains the same when modifying the dashboard."
        },
        "isEnabled": {
          "type": "boolean",
          "description": "Specifies whether the dashboard is visible on the user's page. This enables the user to hide dashboards without deleting them. Not required if it remains the same when modifying the dashboard.",
          "default": false
        },
        "title": {
          "type": "string",
          "description": "The title of a dashboard, not required if it remains the same when modifying the dashboard."
        },
        "widgets": {
          "type": "array",
          "description": "The array of widgets belonging to the dashboard. Not required if it remains the same when modifying the dashboard.",
          "items": {
            "$ref": "#/definitions/Widget"
          }
        }
      },
      "description": "Dashboard object for modifying existing dashboards, if the id property is given, it indicates that the dashboard already exists and will be updated in accordance with the specified parameters. For creating new dashboards, see Dashboard Create"
    },
    "Datasource": {
      "type": "object",
      "required": [
        "datasourceId",
        "datasourceTitle"
      ],
      "properties": {
        "datasourceId": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier for a data source"
        },
        "datasourceTitle": {
          "type": "string",
          "description": "Description of the data source"
        }
      },
      "description": "A segment of data within the database"
    },
    "Department": {
      "type": "object",
      "required": [
        "departmentId",
        "departmentLocation",
        "departmentName"
      ],
      "properties": {
        "departmentId": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier for a department"
        },
        "departmentLocation": {
          "type": "string",
          "description": "The location of the department"
        },
        "departmentName": {
          "type": "string",
          "description": "Name of the department as identified by staff, such as A&E"
        }
      },
      "description": "Department object, which is a representation of departments within the hospital - currently includes A&E, OPR, OPU and IP"
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier for errors"
        },
        "message": {
          "type": "string",
          "description": "Displays the error message"
        }
      },
      "description": "Describes the error in case of a bad request."
    },
    "ExamToReport": {
      "type": "object",
      "description": "Time between exam and report"
    },
    "ExamsCompleted": {
      "type": "object",
      "required": [
        "dateOfExam",
        "dateOfRequest",
        "examId",
        "patientId",
        "userId"
      ],
      "properties": {
        "dateOfExam": {
          "type": "string",
          "format": "date",
          "description": "Timestamp data of when the exam was completed"
        },
        "dateOfRequest": {
          "type": "string",
          "format": "date",
          "description": "Timestamp format indicating the time the request for the exam was made"
        },
        "examId": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier for an exam"
        },
        "patientId": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier of patient participating in the exam"
        },
        "scannerId": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier for a scanner"
        },
        "type": {
          "type": "string",
          "description": "Type of the exam (for example: chest x-ray)"
        },
        "userId": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier of employee who completed the scan"
        }
      },
      "description": "Exams that have already been completed"
    },
    "ExamsRequested": {
      "type": "object",
      "required": [
        "examId"
      ],
      "properties": {
        "dateOfExam": {
          "type": "string",
          "format": "date",
          "description": "Timestamp representation of the date the exam is to happen"
        },
        "dateOfRequest": {
          "type": "string",
          "format": "date",
          "description": "Timestamp identifier of when the exam was requested"
        },
        "examId": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier for a scanner"
        },
        "patientId": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier of patient whom the exam is requested for"
        },
        "scannerId": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier for a scanner"
        },
        "type": {
          "type": "string",
          "description": "Type of the exam (for example: chest x-ray)"
        },
        "userId": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier of the employee carrying out the exam"
        }
      },
      "description": "Exams that have been requested but not completed"
    },
    "PermissionIds": {
      "type": "object",
      "required": [
        "permissionIds"
      ],
      "properties": {
        "permissionIds": {
          "type": "array",
          "description": "A list of unique identifiers for permissions related to a role",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "description": "A list of unique identifiers for permissions related to a role"
    },
    "Permissions": {
      "type": "object",
      "description": "Specifies what data and actions the user has access to based on their role."
    },
    "ReferralToExam": {
      "type": "object",
      "description": "Time between referral to exam"
    },
    "Role": {
      "type": "object",
      "required": [
        "permissionIds",
        "roleId"
      ],
      "properties": {
        "permissionIds": {
          "type": "array",
          "description": "A list of all associated permissionIds",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "roleId": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier for a role"
        },
        "roleName": {
          "type": "string",
          "description": "The name of the role"
        }
      },
      "description": "Specifies the role of the user, generally corresponds to position in hospital (example: nurse) and is associated with permissions"
    },
    "RolePermission": {
      "type": "object",
      "required": [
        "permissionIds",
        "roleId"
      ],
      "properties": {
        "permissionIds": {
          "type": "array",
          "description": "Unique identifiers for permissions",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "roleId": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier for roles"
        }
      },
      "description": "Roles with assigned permissions"
    },
    "Scanner": {
      "type": "object",
      "required": [
        "scannerId",
        "scannerLocation",
        "scannerName"
      ],
      "properties": {
        "scannerId": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier for a scanner"
        },
        "scannerLocation": {
          "type": "string",
          "description": "The location of the scanner"
        },
        "scannerName": {
          "type": "string",
          "description": "The name or identification number of the scanner, as known by the staff"
        }
      },
      "description": "Representation of a scanner object used in hospitals to complete exams"
    },
    "User": {
      "type": "object",
      "required": [
        "roleId",
        "userId"
      ],
      "properties": {
        "roleId": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier associated with a role"
        },
        "userId": {
          "type": "integer",
          "format": "int32",
          "description": "A unique identifier for the user"
        },
        "userTitle": {
          "type": "string",
          "description": "**not decided yet**"
        }
      },
      "description": "The user of the system who topically is an employee at the hospital."
    },
    "Widget": {
      "type": "object",
      "required": [
        "configuration",
        "id",
        "isEnabled",
        "title"
      ],
      "properties": {
        "configuration": {
          "type": "string",
          "description": "JSON string representing the client-side display related logic."
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier representing a specific widget for a given dashboard."
        },
        "isEnabled": {
          "type": "boolean",
          "description": "Specifies whether the widget is visible on the dashboard.",
          "default": false
        },
        "title": {
          "type": "string",
          "description": "The title of the widget."
        }
      },
      "description": "A section of a dashboard"
    },
    "Widget Create": {
      "type": "object",
      "required": [
        "configuration",
        "isEnabled",
        "title"
      ],
      "properties": {
        "configuration": {
          "type": "string",
          "description": "The client-side, display related logic stored as a JSON sting."
        },
        "isEnabled": {
          "type": "boolean",
          "description": "Specifies whether the widget is visible on the dashboard.",
          "default": false
        },
        "title": {
          "type": "string",
          "description": "The title of the widget."
        }
      },
      "description": "Widget object used when creating new widgets. If the widget is missing an id, it is identified as a new widget."
    },
    "Widget Update": {
      "type": "object",
      "properties": {
        "configuration": {
          "type": "string",
          "description": "The client-side, display related logic stored as a JSON string."
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the widget."
        },
        "isEnabled": {
          "type": "boolean",
          "description": "Specifies whether the widget is visible on the dashboard or not.",
          "default": false
        },
        "title": {
          "type": "string",
          "description": "The title of the widget."
        }
      },
      "description": "Widget object used when updating an existing widget. If the id property is given, it indicates that the widget already exists and will be updated in accordance with the specified parameters. If an existing widget's id is missing it will be deleted from the dashboard. For creating new widgets, see Widget Create."
    }
  }
}