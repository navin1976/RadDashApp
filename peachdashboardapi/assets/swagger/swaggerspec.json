{
  "swagger": "2.0",
  "info": {
    "description": "A secure, REST API for real-time data analytics within Project Peach.",
    "version": "1.0.0",
    "title": "Radiology Dashboard API",
    "contact": {
      "name": "Melinda Fekete",
      "email": "melinda.fekete.15@ucl.ac.uk"
    }
  },
  "tags": [
    {
      "name": "Datasource",
      "description": ""
    },
    {
      "name": "Dashboards",
      "description": ""
    },
    {
      "name": "Roles and Permissions",
      "description": ""
    },
    {
      "name": "Data",
      "description": ""
    },
    {
      "name": "Users",
      "description": ""
    }
  ],
  "paths": {
    "/dashboard/default": {
      "get": {
        "tags": [
          "Dashboards"
        ],
        "summary": "Get Default Dashboard",
        "description": "Retrieve default dashboard for a given role",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roleId",
            "in": "query",
            "description": "Unique identifier for a role",
            "required": true,
            "type": "integer",
            "format": "int32",
            "x-example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "An array of dashboard for role successfully retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Dashboard"
              }
            }
          },
          "400": {
            "description": "Data types in parameter list do not match - expected an int"
          },
          "403": {
            "description": "User not authorized no access information"
          }
        }
      },
      "post": {
        "tags": [
          "Dashboards"
        ],
        "summary": "New Default Dashboard",
        "description": "Creates a new default dashboard for a given role",
        "operationId": "postDashboardDefault",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roleId",
            "in": "query",
            "description": "Unique identifier for a role",
            "required": true,
            "type": "integer",
            "format": "int32",
            "x-example": 6
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DashboardCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The default dashboard is successfully created, The dashboard created is returned",
            "schema": {
              "$ref": "#/definitions/DashboardCreate"
            }
          },
          "400": {
            "description": "Data types in request do not match expectations"
          },
          "403": {
            "description": "User is not authorised to create a new default dashboard",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/dashboard/default/{dashboardId}": {
      "put": {
        "tags": [
          "Dashboards"
        ],
        "summary": "Default Dashboard Update",
        "description": "Updates an existing default dashboard",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "dashboardId",
            "in": "path",
            "description": "Unique identifier for a dashboard",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DashboardUpdate"
            }
          }
        ],
        "responses": {
          "205": {
            "description": "Default dashboard successfully updated"
          },
          "400": {
            "description": "Data types in request do not match expectations"
          },
          "403": {
            "description": "User is not authorized to modify default dashboard",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Dashboards"
        ],
        "summary": "Deletes Default Dashboard",
        "description": "Deletes an existing default dashboard",
        "parameters": [
          {
            "name": "dashboardId",
            "in": "path",
            "description": "Unique identifier for a dashboard",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "205": {
            "description": "Existing default dashboard successfully deleted"
          },
          "400": {
            "description": "Data types in request do not match expectations"
          },
          "403": {
            "description": "User is not authorized to delete default dashboard",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/dashboard/{dashboardId}": {
      "put": {
        "tags": [
          "Dashboards"
        ],
        "summary": "Updates User Dashboard",
        "description": "Updates an existing dashboard for a user",
        "operationId": "putDashboardDashboardId",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "dashboardId",
            "in": "path",
            "description": "Refers to the id of the dashboard that is to be updated or deleted.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DashboardUpdate"
            }
          }
        ],
        "responses": {
          "205": {
            "description": "Dashboard is successfully updated, please refresh content."
          },
          "400": {
            "description": "Data types in request do not match expectations"
          },
          "403": {
            "description": "User is not authorized to update the given dashboard",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Dashboards"
        ],
        "summary": "Deletes User Dashboard",
        "description": "Deletes an existing dashboard.",
        "operationId": "deleteDashboardDashboardId",
        "parameters": [
          {
            "name": "dashboardId",
            "in": "path",
            "description": "Refers to the id of the dashboard that is to be updated or deleted.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "205": {
            "description": "Dashboard is successfully deleted (not enabled), please refresh content."
          },
          "400": {
            "description": "Data types in request do not match expectations"
          },
          "403": {
            "description": "User is not authorized to delete the given dashboard",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/dashboards": {
      "get": {
        "tags": [
          "Dashboards"
        ],
        "summary": "The Dashboard Retrieval endpoint",
        "description": "The Dashboard Retrieval endpoint returns information about the user's existing dashboards. \nThe response includes the configuration which specifies all display-related information.",
        "operationId": "getDashboards",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An array of dashboards",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Dashboard"
              }
            }
          },
          "400": {
            "description": "Expected an integer"
          }
        }
      },
      "post": {
        "tags": [
          "Dashboards"
        ],
        "summary": "The Dashboard Creation endpoint is used when creating a new dashboard.",
        "description": "The Dashboard Creation endpoint is used when creating a new dashboard.",
        "operationId": "postDashboards",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DashboardCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Dashboard successfully created, refresh the content.",
            "schema": {
              "$ref": "#/definitions/Dashboard"
            }
          },
          "400": {
            "description": "Expected integers and a boolean value"
          }
        }
      }
    },
    "/data/datasource": {
      "get": {
        "tags": [
          "Data"
        ],
        "summary": "Retrieves a list of all data sources for the role of the current user",
        "description": "Retrieves a list of all data sources for a given role to present the user with a list of available datasources, and filters and metrics associated with these datasources",
        "operationId": "getDataDatasource",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Data sources successfully retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Datasource"
              }
            }
          }
        }
      }
    },
    "/data/entities": {
      "post": {
        "tags": [
          "Data"
        ],
        "summary": "Retrieves a list of entities",
        "description": "Retrieves a list of entities given certain search parameters",
        "operationId": "getDataDepartments",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RequestEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Entities successfully retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/File"
              }
            }
          }
        }
      }
    },
    "/data/filter/{filterId}": {
      "get": {
        "tags": [
          "Data"
        ],
        "summary": "Get the distinct values for a filter",
        "description": "Get the distinct values for a filter",
        "parameters": [
          {
            "name": "filterId",
            "in": "path",
            "description": "the filter to get the values for",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Expected an integer"
          },
          "403": {
            "description": "Cannot get distinct values for this filter or filter does not exist"
          }
        }
      }
    },
    "/data/timeseries": {
      "post": {
        "tags": [
          "Data"
        ],
        "summary": "Retrieve Timeseries Data",
        "description": "Retrieves data for a metric about a datasource, for example: number of exams per scanner per day",
        "operationId": "postDataTimeseries",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RequestTimeseries"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Metric computed for the given datasource using the given filters and granularity",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MetricData"
              }
            }
          },
          "400": {
            "description": "Expected an integer"
          }
        }
      }
    },
    "/datasources": {
      "get": {
        "tags": [
          "Datasource"
        ],
        "summary": "Datasource retrieval",
        "description": "Retrieves a list of all datasources and metrics, filters and granularities associated with the datasource",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all datasources and metrics, filters and granularities associated with the datasource successfully retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Datasource"
              }
            }
          },
          "400": {
            "description": "Expected an integer"
          },
          "403": {
            "description": "The user is not authorized to access all datasources",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/datasources/assign": {
      "put": {
        "tags": [
          "Datasource"
        ],
        "summary": "Datasource assignment to Role",
        "description": "Assign datasources to a particular role",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RoleDatasource"
            }
          }
        ],
        "responses": {
          "205": {
            "description": "Datasources successfully updates for the given role"
          },
          "400": {
            "description": "Expected an integer"
          },
          "403": {
            "description": "The user is not authorized to assign datasources",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/permissions": {
      "get": {
        "tags": [
          "Roles and Permissions"
        ],
        "summary": "Retrieves a list of all available permissions",
        "description": "Retrieves a list of all available permissions",
        "operationId": "getPermissions",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Permission"
              }
            }
          },
          "403": {
            "description": "The user is not authorized to access the list of permissions",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/permissions/assign": {
      "put": {
        "tags": [
          "Roles and Permissions"
        ],
        "summary": "Assigns new permissions to roles or modifies existing ones.",
        "description": "Assigns new permissions to roles or modifies existing ones.",
        "operationId": "putPermissionsAssign",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RolePermission"
            }
          }
        ],
        "responses": {
          "205": {
            "description": "The update was successful, please refresh content."
          },
          "400": {
            "description": "Expected integers"
          },
          "403": {
            "description": "The user is not authorised to make this request",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/roles": {
      "get": {
        "tags": [
          "Roles and Permissions"
        ],
        "summary": "Retrieves the list of all roles",
        "description": "Retrieves the list of all roles",
        "operationId": "getRoles",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of roles successfully retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Role"
              }
            }
          },
          "403": {
            "description": "The user is not authorised to access this information",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Roles and Permissions"
        ],
        "summary": "Create new role",
        "description": "Creates a new role",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RoleCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Role successfully created",
            "schema": {
              "$ref": "#/definitions/RoleCreated"
            }
          },
          "400": {
            "description": "Expected a string"
          },
          "403": {
            "description": "User is not authorised to create a new default dashboard"
          }
        }
      }
    },
    "/roles/assign": {
      "put": {
        "tags": [
          "Roles and Permissions"
        ],
        "summary": "The request is sent when a role is changed for a particular user.",
        "description": "The request is sent when a role is changed for a particular user.",
        "operationId": "putRolesAssign",
        "parameters": [
          {
            "name": "roleId",
            "in": "query",
            "description": "Unique identifier for a role which is to be updated",
            "required": true,
            "type": "integer",
            "format": "int32",
            "x-example": 10
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Unique identifier for a particular user",
            "required": true,
            "type": "integer",
            "format": "int32",
            "x-example": 1234
          }
        ],
        "responses": {
          "205": {
            "description": "The update was successful, content should be refreshed"
          },
          "400": {
            "description": "Request failed - Expected an integer"
          },
          "403": {
            "description": "The user is not authorised to make this request",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/roles/{roleId}": {
      "delete": {
        "tags": [
          "Roles and Permissions"
        ],
        "summary": "Role deletion",
        "description": "Deletes a given role",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "Unique identifier for a role",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "replaceRoleId",
            "in": "query",
            "description": "What to replace the current role with",
            "required": true,
            "type": "integer",
            "format": "int32",
            "x-example": 1
          }
        ],
        "responses": {
          "205": {
            "description": "Role successfully deleted, please refresh content"
          },
          "400": {
            "description": "Expected an integer"
          },
          "403": {
            "description": "User not authorised to delete a role"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieve a list of all users",
        "description": "Retrieve a list of all users",
        "operationId": "getUsers",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The list of all users was successfully retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "403": {
            "description": "The user is not authorised to access this information",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/users/loggedin": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Info of logged in user",
        "description": "Retrieves information about the user that is logged",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Info of logged in user successfully retrieved",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Can not identify userId"
          }
        }
      }
    }
  },
  "definitions": {
    "Dashboard": {
      "type": "object",
      "required": [
        "configuration",
        "isEnabled",
        "title"
      ],
      "properties": {
        "configuration": {
          "type": "string",
          "description": "JSON string representing the client-side display related logic."
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier representing a specific dashboard for a given user. (not required when creating a new dashboard)"
        },
        "isEnabled": {
          "type": "boolean",
          "description": "Specifies whether the dashboard is visible on the user's page. This enables the user to hide dashboards without deleting them.",
          "default": false
        },
        "title": {
          "type": "string",
          "description": "The title of a dashboard."
        }
      },
      "description": "Dashboard object"
    },
    "DashboardCreate": {
      "type": "object",
      "required": [
        "configuration",
        "isEnabled",
        "title"
      ],
      "properties": {
        "configuration": {
          "type": "string",
          "description": "Client-side, display related logic stored as a JSON string."
        },
        "isEnabled": {
          "type": "boolean",
          "description": "Specifies whether the dashboard is shown on the page or not.",
          "default": false
        },
        "title": {
          "type": "string",
          "description": "The title of the dashboard."
        }
      },
      "description": "Dashboard object used when creating dashboards, if the Dashboard object is missing an id, it is identified as a new dashboard"
    },
    "DashboardUpdate": {
      "type": "object",
      "properties": {
        "configuration": {
          "type": "string",
          "description": "JSON string representing the client-side display related logic. Not required if it remains the same when modifying the dashboard."
        },
        "isEnabled": {
          "type": "boolean",
          "description": "Specifies whether the dashboard is visible on the user's page. This enables the user to hide dashboards without deleting them. Not required if it remains the same when modifying the dashboard.",
          "default": false
        },
        "title": {
          "type": "string",
          "description": "The title of a dashboard, not required if it remains the same when modifying the dashboard."
        }
      },
      "description": "Dashboard object for modifying existing dashboards, if the id property is given, it indicates that the dashboard already exists and will be updated in accordance with the specified parameters. For creating new dashboards, see Dashboard Create"
    },
    "Datasource": {
      "type": "object",
      "required": [
        "filters",
        "granularities",
        "id",
        "metrics",
        "name"
      ],
      "properties": {
        "filters": {
          "type": "array",
          "description": "Filters available for a particular data dource",
          "items": {
            "$ref": "#/definitions/Filter"
          }
        },
        "granularities": {
          "type": "array",
          "description": "Available granularity for requesting the data, such as daily, weekly, monthly, yearly",
          "items": {
            "$ref": "#/definitions/Granularity"
          }
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier for a data source"
        },
        "metrics": {
          "type": "array",
          "description": "An array of metrics available on the data source (such as: 'total number')",
          "items": {
            "$ref": "#/definitions/Metric"
          }
        },
        "name": {
          "type": "string",
          "description": "Description of the data source"
        }
      },
      "description": "A segment of data within the database"
    },
    "Filter": {
      "type": "object",
      "required": [
        "id",
        "name",
        "title"
      ],
      "properties": {
        "canGetDistinct": {
          "type": "boolean",
          "description": "Specifies whether the API can return all the dictinct values for the filter",
          "default": false
        },
        "datasource": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier for the datasource associated with the filter"
        },
        "filterType": {
          "type": "string",
          "description": "Specifies the type of the filter, such as categorical, numerical, etc."
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier for a filter"
        },
        "name": {
          "type": "string",
          "description": "Name of the filter"
        },
        "title": {
          "type": "string",
          "description": "Friendly name for the filter"
        }
      },
      "description": "Filters available for a given data source"
    },
    "Granularity": {
      "type": "object",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id of the granularity"
        },
        "name": {
          "type": "string",
          "description": "Name of the granularity"
        }
      },
      "description": "Granularity of the request"
    },
    "Metric": {
      "type": "object",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "the id of the metric"
        },
        "name": {
          "type": "string",
          "description": "The name of the metric"
        }
      },
      "description": "Represents a metric used for timeseries\n{ \"metricId\": 1, \"metricName\" : \"total number\" },\n{ \"metricId\": 2, \"metricName\" : \"median\" },\n{ \"metricId\": 3, \"metricName\" : \"mean\" },"
    },
    "MetricData": {
      "type": "object",
      "required": [
        "date"
      ],
      "properties": {
        "date": {
          "type": "string",
          "description": "Date according to granularity set"
        },
        "metric": {
          "type": "number",
          "format": "double",
          "description": "The metric requested, if there was a split, the field is not set"
        },
        "split": {
          "type": "array",
          "description": "If there was a split, this field is set, it is an array of SplitMetric which represent the metric computed for each distinct value of the dimension by which the data was split",
          "items": {
            "$ref": "#/definitions/SplitMetric"
          }
        }
      },
      "description": "Any metric that can be represented with a double. It is an array that is returned according to the granularity as requested. \n\n[\n  {\n    \"metric\": 108750,\n    \"date\": \"2010-01-01T00:00:00.000Z/2011-01-01T00:00:00.000Z\"\n  }\n]"
    },
    "Permission": {
      "type": "object",
      "required": [
        "description",
        "id"
      ],
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the permission, such as \"view radiology data\""
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier for a permission"
        }
      },
      "description": "Specifies what data and actions the user has access to based on their role."
    },
    "PermissionIds": {
      "type": "object",
      "required": [
        "permissionIds"
      ],
      "properties": {
        "permissionIds": {
          "type": "array",
          "description": "A list of unique identifiers for permissions related to a role",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "description": "A list of unique identifiers for permissions related to a role"
    },
    "RequestEntity": {
      "type": "object",
      "required": [
        "dataSourceId",
        "endTime",
        "filters",
        "startTime"
      ],
      "properties": {
        "dataSourceId": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the datasource"
        },
        "endTime": {
          "type": "string",
          "description": "end time, support ISO but also 'now'"
        },
        "filters": {
          "type": "array",
          "description": "Filters to filter by",
          "items": {
            "$ref": "#/definitions/RequestFilter"
          }
        },
        "startTime": {
          "type": "string",
          "description": "start time, supports ISO but also '6 months ago'"
        }
      },
      "description": "Request to retrieve entities, if split by is populated you get the count of entities split by this dimension"
    },
    "RequestFilter": {
      "type": "object",
      "required": [
        "filterId",
        "filterValues"
      ],
      "properties": {
        "filterId": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the filter"
        },
        "filterValues": {
          "type": "array",
          "description": "Value to filter with, can be string, int, double or an array.",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Object to represent a filter in a request"
    },
    "RequestTimeseries": {
      "type": "object",
      "required": [
        "dataSourceId",
        "endTime",
        "filters",
        "granularityId",
        "metricId",
        "startTime"
      ],
      "properties": {
        "dataSourceId": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the datasource"
        },
        "endTime": {
          "type": "string",
          "description": "endTime supports ISO date but also 'now'"
        },
        "filters": {
          "type": "array",
          "description": "List of filters to filter by",
          "items": {
            "$ref": "#/definitions/RequestFilter"
          }
        },
        "granularityId": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the granularity to use in the query"
        },
        "metricId": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the metric requested"
        },
        "splitBy": {
          "type": "integer",
          "format": "int32",
          "description": "splitBy filter ID, each time increment will show the results split by a certain filter"
        },
        "startTime": {
          "type": "string",
          "description": "startTime, supports ISO date but also '6 months ago' format"
        }
      },
      "description": "Request for a timeseries metric"
    },
    "Role": {
      "type": "object",
      "required": [
        "datasourceIds",
        "id",
        "permissionIds"
      ],
      "properties": {
        "datasourceIds": {
          "type": "array",
          "description": "A list of unique identifiers for data sources associated with the role",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": {
          "type": "string",
          "description": "The name of the role"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier for a role"
        },
        "permissionIds": {
          "type": "array",
          "description": "A list of all associated permissionIds",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "description": "Specifies the role of the user, generally corresponds to position in hospital (example: nurse) and is associated with permissions"
    },
    "RoleCreate": {
      "type": "object",
      "required": [
        "description"
      ],
      "properties": {
        "description": {
          "type": "string",
          "description": "A name or description of the role"
        }
      },
      "description": "Role entity used when creating a new role"
    },
    "RoleCreated": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "description of the role"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "role id"
        }
      },
      "description": "role created"
    },
    "RoleDatasource": {
      "type": "object",
      "required": [
        "datasourceIds",
        "roleId"
      ],
      "properties": {
        "datasourceIds": {
          "type": "array",
          "description": "A list of unique identifiers for datasources",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "roleId": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier for a role"
        }
      },
      "description": "A role associated with a list of data sources"
    },
    "RolePermission": {
      "type": "object",
      "required": [
        "permissionIds",
        "roleId"
      ],
      "properties": {
        "permissionIds": {
          "type": "array",
          "description": "Unique identifiers for permissions",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "roleId": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier for roles"
        }
      },
      "description": "Roles with assigned permissions"
    },
    "SplitMetric": {
      "type": "object",
      "required": [
        "metric",
        "split"
      ],
      "properties": {
        "metric": {
          "type": "number",
          "format": "double",
          "description": "The metric computed"
        },
        "split": {
          "type": "string",
          "description": "The distinct value of the dimension by which the data was split"
        }
      },
      "description": "An object representing the metric calculation over a given dimension that we used as a split."
    },
    "User": {
      "type": "object",
      "required": [
        "roleId",
        "userId"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Username of logged in user"
        },
        "roleId": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier associated with a role"
        },
        "roleName": {
          "type": "string",
          "description": "Name of the role of logged in user"
        },
        "userId": {
          "type": "integer",
          "format": "int32",
          "description": "A unique identifier for the user"
        }
      },
      "description": "The user of the system who topically is an employee at the hospital."
    }
  }
}